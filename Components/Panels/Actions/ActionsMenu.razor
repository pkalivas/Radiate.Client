@using System.Reactive.Linq
@inherits StoreComponent<ToolBarProjection>
@inject IDialogService DialogService
@inject NavigationManager NavigationManager

<MudMenu Dense="true" Icon="@Icons.Material.Outlined.MoreVert" Size="Size.Small">
    <MudMenuItem>
        <MudButton OnClick="@CopyRun"
                   Size="Size.Small"
                   StartIcon="@Icons.Material.Outlined.ContentCopy">
            Copy
        </MudButton>
    </MudMenuItem>
    <MudDivider/>
    <MudMenuItem>
        <MudButton OnClick="@InspectRun"
                   Size="Size.Small"
                   StartIcon="@Icons.Material.Outlined.Insights">
            Inspect
        </MudButton>
    </MudMenuItem>
    <MudDivider/>
    <MudMenuItem>
        <MudButton OnClick="@InspectPanels"
                   Size="Size.Small"
                   StartIcon="@Icons.Material.Outlined.DisplaySettings">
            Panels
        </MudButton>
    </MudMenuItem>
</MudMenu>

@code {
    protected override IObservable<ToolBarProjection> Select() => Store.Select(UiSelectors.SelectToolBarModel);
    
    private async Task CopyRun() => await Task.Run(() =>
    {
        var runId = Model!.RunId;
        var newRunId = Guid.NewGuid();

        NavigationManager.NavigateTo($"/runs/{newRunId}/{Model.ModelType.ToLower()}");

        Store.Dispatch(new SetRunLoadingAction(newRunId, true));
        Store.Dispatch(new NavigateToRunAction(newRunId));
        Store.Dispatch(new CopyRunAction(runId, newRunId));
    });
    
    private async Task InspectRun() => await DialogService.ShowAsync<InspectDialog>("Inspect Run", new DialogOptions
    {
        CloseButton = true,
        MaxWidth = MaxWidth.Large,
        FullWidth = true,
    });
    
    private async Task InspectPanels() => await DialogService.ShowAsync<PanelStateDialog>("Inspect Panels", new DialogOptions
    {
        CloseButton = true,
        MaxWidth = MaxWidth.Medium,
        FullWidth = true,
    });
}