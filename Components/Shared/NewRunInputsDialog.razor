@using Radiate.Client.Services.Store.Models
@using Radiate.Client.Services.Store.Schema
<MudDialog>
    <DialogContent>
        <div>
            <MudSelect SelectedValuesChanged="@OnModelChange" 
                       Value="@RunModel.Inputs.ModelType" 
                       MultiSelection="false"
                       HelperText="Model To Run"
                       T="string"
                       Label="Model"
                       Variant="Variant.Text">
                @foreach (var model in StateOptions.ModelNames)
                {
                    <MudSelectItem Value="@model"/>
                }
            </MudSelect>
        </div>
        <div>
	        <MudSelect SelectedValuesChanged="@OnDataSetChange"
	                   Value="@RunModel.Inputs.DataSetType"
	                   MultiSelection="false"
	                   HelperText="DataSet To Run"
	                   T="string"
	                   Label="DataSet"
	                   Variant="Variant.Text">
                @if (RunModel.Inputs.ModelType == "Image")
                {
                    @foreach (var data in StateOptions.ImageDataSetNames)
                    {
	                    <MudSelectItem Value="@data"/>
                    }
                }
                else
                {
	                @foreach (var data in StateOptions.DataSetNames)
	                {
		                <MudSelectItem Value="@data"/>
	                }
                }
	        </MudSelect>
        </div>
        <div class="mt-3">
            <h5>Genetic Inputs</h5>
            <MudDivider/>
            <div class="col">
                <MudNumericField Label="Population Size"
                                 Variant="Variant.Filled"
                                 Value="@RunModel.Inputs.PopulationSize"
                                 ValueChanged="@((int size) => RunModel.Inputs.PopulationSize = size)">
                </MudNumericField>
                <MudNumericField Label="Mutation Rate"
                                 Variant="Variant.Filled"
                                 Value="@RunModel.Inputs.MutationRate"
                                 ValueChanged="@((float rate) => RunModel.Inputs.MutationRate = rate)">
                </MudNumericField>
                <MudNumericField Label="Max Epochs"
                                 Variant="Variant.Filled"
                                 Value="@RunModel.Inputs.IterationLimit"
                                 ValueChanged="@((int limit) => RunModel.Inputs.IterationLimit = limit)">
                </MudNumericField>
            </div>    
        </div>
        
        <MudDivider/>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Start</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    
    private RunModel RunModel { get; set; }

    protected override void OnInitialized()
    {
        RunModel = new RunModel();
        base.OnInitialized();
    }

    void Cancel() => MudDialog.Cancel();

    void Submit() => MudDialog.Close(DialogResult.Ok(RunModel)); 

    private void OnModelChange(IEnumerable<string> model)
    {
        var selectedModel = model.First();
        if (RunModel.Inputs.ModelType == "Image" && selectedModel != "Image")
        {
	        RunModel.Inputs.DataSetType = "Graph";
        }

        RunModel.Inputs.ModelType = model.First();
        if (RunModel.Inputs.ModelType == "Image")
        {
	        RunModel.Inputs.DataSetType = "Polygon";
        }
    }
    
    private void OnDataSetChange(IEnumerable<string> value)
    {
        RunModel.Inputs.DataSetType = value.First();
    }
}