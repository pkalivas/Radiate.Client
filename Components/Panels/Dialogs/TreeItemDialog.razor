@using Radiate.Client.Services.Mappers
@typeparam TItem where TItem : ITreeItem<TKey>
@typeparam TKey

<MudDialog DisableSidePadding="true">
    <DialogContent>
        <MudContainer Style="max-height: 500px; overflow-y: scroll">
            <MudTreeView Items="@_items" Dense="true" Hover="true" ExpandOnClick="true">
                <ItemTemplate>
                    <MudTreeViewItem @bind-Expanded="@context.IsExpanded" Items="@context.TreeItems">
                        <Content>
                            <MudTreeViewItemToggleButton @bind-Expanded="@context.IsExpanded" Visible="@context.HasChild"/>
                            <DynamicComponent Type="ChildContent" Parameters="@ChildContentProps(context.Data)"/>
                        </Content>
                    </MudTreeViewItem>
                </ItemTemplate>
            </MudTreeView>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        @if (Items.Length > 1)
        {
            <MudButton OnClick="@ToggleExpanded">
                @if (_expanded)
                {
                    <MudText>Collapse All</MudText>
                }
                else
                {
                    <MudText>Expand All</MudText>
                }
            </MudButton>
        }
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public TKey Index { get; set; }
    [Parameter] public TItem[] Items { get; set; }
    [Parameter] public Type ChildContent { get; set; }
    [Parameter] public Func<TItem, Dictionary<string, object>> ChildContentProps { get; set; }

    private HashSet<TreeItemData<TItem, TKey>> _items { get; set; } = new();
    private bool _expanded = false;

    protected override Task OnInitializedAsync()
    {
        _items = TreeItemMapper.ToTree(Index, Items.ToDictionary(key => key.Index), _expanded);
        return base.OnInitializedAsync();
    }

    private void ToggleExpanded()
    {
        _expanded = !_expanded;
        _items = TreeItemMapper.ToTree(Index, Items.ToDictionary(key => key.Index), _expanded);
    }
}