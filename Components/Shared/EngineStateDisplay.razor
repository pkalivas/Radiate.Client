@using Radiate.Engines.Entities
@using Radiate.Engines.Schema

@if (EngineState == null)
{
    <div>
        No engine state available
    </div>
}
else
{
    <div class="container">
        <div class="row">
            <div class="col">
                <div class="d-inline-flex">
                   <MudIcon Icon="@GetIcon(EngineState)" Class="ml-0 mr-2" Color="@GetColor(EngineState)"/>
                    <strong>@(EngineState.Name[..3])</strong>       
                </div>
            </div>
                        
            <div class="col">
                <div class="d-inline-flex">
                    <strong>State:</strong>
                    <div class="pl-2">@EngineState.State</div>
                </div>
            </div>
                        
            <div class="col">
                <div class="d-inline-flex">
                    <strong>Runs:</strong>
                    <div class="pl-2">@EngineState.Metrics.Get(MetricNames.Run)?.Statistics?.Sum</div>
                </div>
            </div>
                        
            <div class="col">
                <div class="d-inline-flex">
                    <strong>Time:</strong>
                    <div class="pl-2">@TimeSpan.FromMilliseconds(EngineState.Metrics.Get(MetricNames.Time)?.Time?.Sum ?? 0)</div>
                </div>
            </div>
                        
            <div class="col">
                <div class="d-inline-flex">
                    <strong>Switches:</strong>
                    <div class="pl-2">@EngineState.Metrics.Get(MetricNames.EngineChange)?.Statistics?.Sum</div>
                </div>
            </div>
        </div>
        
    </div>
}

@code {
    [Parameter] public EngineState? EngineState { get; set; }
    
    private static string GetIcon(EngineState state) => state.State switch
    {
        EngineStateTypes.Pending => Icons.Material.Filled.Pending,
        EngineStateTypes.Started => Icons.Material.Filled.Start,
        EngineStateTypes.Running => Icons.Material.Filled.RunCircle,
        EngineStateTypes.Stopped => Icons.Material.Filled.Stop,
        _ => Icons.Custom.FileFormats.FileCode
    };

    private static Color GetColor(EngineState state) => state.State switch
    {
        EngineStateTypes.Pending => Color.Default,
        EngineStateTypes.Started => Color.Primary,
        EngineStateTypes.Running => Color.Success,
        EngineStateTypes.Stopped => Color.Secondary,
        _ => Color.Default
    };
}