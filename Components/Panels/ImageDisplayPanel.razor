@inherits StoreComponent<ImageDisplayPanelProjection>

<MudCard Elevation="2" Class="h-100">
    <MudCardHeader>
        <CardHeaderContent>
            <div class="d-flex align-items-center justify-content-between">
                <div class="d-flex align-items-center">
                    <MudText Typo="Typo.body1" Style="ml-5">@ImageType</MudText>
                </div>
                <div class="d-flex align-items-center mr-1">
                    @if (ImageType is ImageTypes.Target && !Model.IsRunning && !Model.IsComplete)
                    {
                        <div class="d-flex align-items-center justify-content-between mr-3">
                            <ImageUpload Height="@Model.Height"
                                         Width="@Model.Width"
                                         ImageChanged="@((ImageEntity image) => Dispatch(new SetTargetImageAction(Model.RunId, image)))"/>
                        </div>
                    }
                    else if (Model.IsComplete)
                    {
                        <div class="d-flex align-items-center mr-3">
                            <ImageDownload Image="@Model?.Image" IsDisabled="@(!Model.IsComplete)"/>
                        </div>
                    }
                    <RunIcon IsRunning="@Model.IsRunning" IsPaused="@Model.IsPaused" IsComplete="@Model.IsComplete"/>
                </div>
            </div>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        @if (!Model.Image.IsEmpty)
        {
            <div Class="d-flex justify-content-center">
                <ImageDisplay ImageWidth="@Model.DisplayWidth" 
                              ImageHeight="@Model.DisplayHeight" 
                              ImageUrl="@Model?.Image.ImageDisplay"
                              ImageTitle="@Model?.ImageType"/>
            </div>
        }
    </MudCardContent>
    <MudCardActions>
        <div class="container">
            <div class="row">
                @if (!Model.Image.IsEmpty)
                {
                    <div class="col justify-content-start align-content-center">
                        <IntInputField Label="Display Width"
                                       Step="1"
                                       Value="@Model.DisplayWidth"
                                       IsReadonly="@Model.IsRunning"
                                       InputsChanged="@((int width) => Dispatch(new SetDisplayImageDimensions(Model.RunId, width, Model.DisplayHeight)))"/>
                    </div>
                    <div class="col justify-content-start align-content-center">
                        <IntInputField Label="Display Height"
                                       Step="1"
                                       Value="@Model.DisplayHeight"
                                       IsReadonly="@Model.IsRunning"
                                       InputsChanged="@((int height) => Dispatch(new SetDisplayImageDimensions(Model.RunId, Model.DisplayWidth, height)))"/>
                    </div>
                }
            </div>
        </div>
    </MudCardActions>
</MudCard>

@code {
    [Parameter] public string ImageType { get; set; }
    
    protected override IObservable<ImageDisplayPanelProjection> Select() => 
        Store.Select(ImageSelectors.SelectImageDisplayPanelModel(ImageType));
}
