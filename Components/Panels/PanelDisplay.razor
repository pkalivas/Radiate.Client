@using Radiate.Client.Domain.Templates.Panels
@using System.Text.Json

@if (Panel is GridPanel)
{
    <MudGrid>
        @foreach (var child in Item.TreeItems)
        {
            if (child.Data.Panel is GridPanel.GridItem gridItem)
            {
                <MudItem md="@gridItem.ColSpan" @key="@child.Data.Key">
                    @foreach (var subChild in child.TreeItems)
                    {
                        <PanelDisplay Item="@subChild"/>
                    }
                </MudItem>
            }
            else
            {
                <MudItem md="12" @key="@child.Data.Key">
                    <PanelDisplay Item="@child"/>
                </MudItem>
            }
        }
    </MudGrid>
}
else if (Panel is ToolbarPanel toolBarPanel)
{
    <MudPaper Elevation="2" Height="@($"{toolBarPanel.Height}px")" Class="h-full">
        <ToolBar Title="@toolBarPanel.Title" Actions="@toolBarPanel.Actions"/>
        <DynamicComponent Type="@toolBarPanel.Content"/>
    </MudPaper>
}
else if (Panel is BoundedPaperPanel boundedPaperPanel)
{
    <MudPaper Elevation="2" Class="pa-3" Height="@($"{boundedPaperPanel.Height}px")" @key="boundedPaperPanel.Id">
        @if (boundedPaperPanel.DisplayHeader)
        {
            <PanelHeader Title="@boundedPaperPanel.Title"/>
        }
        <DynamicComponent Type="@boundedPaperPanel.Content" Parameters="@boundedPaperPanel.Props"/>
    </MudPaper>
}
else if (Panel is TabPanel)
{
    <MudTabs Elevation="2" Centered="true" Rounded="false" @key="Item.Data.Key">
        @foreach (var tabItem in Item.TreeItems)
        {
            <MudTabPanel Text="@tabItem.Data.Panel.Title" @key="@tabItem.Data.Key">
                <PanelDisplay Item="@tabItem"/>
            </MudTabPanel>
        }
    </MudTabs>
}
else if (Panel is PaperPanel paperPanel)
{
    <MudPaper Elevation="2" Class="pa-3" @key="paperPanel.Id">
        @if (paperPanel.DisplayHeader)
        {
            <PanelHeader Title="@paperPanel.Title"/>
        }
        <DynamicComponent Type="@paperPanel.Content" Parameters="@paperPanel.Props"/>
    </MudPaper>
}
else if (Panel is CardPanel cardPanel)
{
    <MudCard Elevation="2" class="h-100">
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6">@cardPanel.Title</MudText>
            </CardHeaderContent>
        </MudCardHeader>
        <MudCardContent>
            <DynamicComponent Type="@cardPanel.Content" Parameters="@cardPanel.Props" />
       </MudCardContent>
    </MudCard>
}
else if (Panel is AccordionPanel accordionPanel)
{
    @if (accordionPanel.Toolbar != null)
    {
        <DynamicComponent Type="accordionPanel.Toolbar!"/>
    }
    <MudExpansionPanels Dense="true" MultiExpansion="true" @key="Item.Data.Key">
        @foreach (var exPanel in Item.TreeItems)
        {
            <MudExpansionPanel IsInitiallyExpanded="exPanel.Data.IsExpanded" Dense="true" @key="exPanel.Data.Key">
                <TitleContent>
                    <PanelHeader Title="@exPanel.Data.Panel.Title"/>
                </TitleContent>
                <ChildContent>
                    @if (exPanel.Data.Panel is AccordionPanelItem accordionPanelItem)
                    {
                        <DynamicComponent Type="@accordionPanelItem.Content"/>
                    }
                </ChildContent>
            </MudExpansionPanel>
        }
    </MudExpansionPanels>
}
else
{
    <MudPaper Elevation="2">
        <MudText Typo="Typo.h6" Class="pa-2">
            Panel type not supported
        </MudText>
    </MudPaper>
}

@code {
    [Parameter] public TreeItemData<PanelState, Guid> Item { get; set; }
    
    private IPanel? Panel => Item?.Data?.Panel;
}
