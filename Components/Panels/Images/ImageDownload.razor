@using Radiate.Client.Domain.Store.Models
@inject IJSRuntime JS

<ButtonTemplate>
    <MudButton Class="w-100"
            HtmlTag="download"
            Size="Size.Small"
            Variant="Variant.Filled"
            Color="Color.Tertiary"
            Disabled="@IsDisabled.Value"
            StartIcon="@Icons.Material.Filled.Download"
            OnClick="@DownloadImage">
        Download
    </MudButton>
</ButtonTemplate>

<script>
  window.downloadFileFromStream = async (fileName, contentStreamReference) => {
    const arrayBuffer = await contentStreamReference.arrayBuffer();
    const blob = new Blob([arrayBuffer]);
    const url = URL.createObjectURL(blob);
    const anchorElement = document.createElement('a');
    anchorElement.href = url;
    anchorElement.download = fileName ?? '';
    anchorElement.click();
    anchorElement.remove();
    URL.revokeObjectURL(url);
  }
</script>

@code
{
    [Parameter] public bool? IsDisabled { get; set; } = false;
    [Parameter] public ImageEntity Image { get; set; }

    private async Task DownloadImage()
    {
        var fileName = "image.png";
        var fileAsStream = Convert.FromBase64String(Image.ImageDataString());
        
        using var memoryStream = new MemoryStream(fileAsStream);
        using var streamRef = new DotNetStreamReference(memoryStream);
        
        await JS.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef);
    }
}