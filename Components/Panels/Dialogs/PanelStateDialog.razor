@inherits StoreComponent<List<IPanel>> 

<MudDialog>
    <DialogContent>
        <MudContainer>
            <MudDataGrid Items="@Model" 
                         Dense="true"
                         Elevation="0"
                         FixedHeader="true"
                         Height="400px" ColumnResizeMode="ResizeMode.Column">
                <Columns>
                    <HierarchyColumn T="IPanel" />
                    <PropertyColumn Property="x => x.Id"/>
                    <TemplateColumn>
                        <CellTemplate>
                            <MudText Typo="Typo.caption">@context.Item.GetType().Name</MudText>
                        </CellTemplate>
                    </TemplateColumn>
                    <PropertyColumn Property="x => x.Title" Title="Title" />
                    <TemplateColumn Title="Visible">
                        <CellTemplate>
                            <MudText Typo="Typo.caption">
                                @(context.Item is GridPanel.GridItem gridItem ? gridItem.IsVisible : "")
                            </MudText>
                        </CellTemplate>
                    </TemplateColumn>
                    <TemplateColumn Title="Expanded">
                        <CellTemplate>
                            <MudText Typo="Typo.caption">
                                @(context.Item is AccordionPanelItem accItem ? accItem.Expanded : "")
                            </MudText>
                        </CellTemplate>
                    </TemplateColumn>                
                </Columns>
                <ChildRowContent>
                    <MudCard Elevation="1">
                        <JsonData Data="context.Item"/>
                    </MudCard>
                </ChildRowContent>
            </MudDataGrid>
        </MudContainer>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    protected override IObservable<List<IPanel>> Select() => Store.Select(state =>
    {
        var currentRunId = state.CurrentRunId;
        return state.RunUis.TryGetValue(currentRunId, out var currentUi) 
            ? currentUi.Panels.Values.ToList() 
            : [];
    });
}