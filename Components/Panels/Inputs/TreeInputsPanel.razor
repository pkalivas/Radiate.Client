@inherits StoreComponent<InputsPanelModelProjection>

<MudGrid Class="mb-3">
    <MudItem md="3">
        <IntInputField Label="Population Size"
                       IsReadonly="@Model.IsReadonly"
                       Value="@Model.Inputs.PopulationInputs.PopulationSize"
                       InputsChanged="@((int val) => OnInputChange(Model, inputs => inputs.PopulationInputs.PopulationSize = val))"/>
    </MudItem>
    <MudItem md="3">
       <FloatInputField Label="Mutation Rate"
                         IsReadonly="@Model.IsReadonly"
                         Value="@Model.Inputs.PopulationInputs.MutationRate"
                         InputsChanged="@((float rate) => OnInputChange(Model, inputs => inputs.PopulationInputs.MutationRate = rate))"/>
    </MudItem>
    <MudItem md="3">
        <FloatInputField Label="Crossover Rate"
                         IsReadonly="@Model.IsReadonly"
                         Value="@Model.Inputs.PopulationInputs.CrossoverRate"
                         InputsChanged="@((float rate) => OnInputChange(Model, inputs => inputs.PopulationInputs.CrossoverRate = rate))"/>
    </MudItem>
    <MudItem md="3">
        <IntInputField Label="Max Depth"
                       IsReadonly="@Model.IsReadonly"
                       Value="@Model.Inputs.TreeInputs.MaxDepth"
                       InputsChanged="@((int val) => OnInputChange(Model, inputs => inputs.TreeInputs.MaxDepth = val))"/>
    </MudItem>
    <MudItem md="3">
        <IntInputField Label="Iteration Limit"
                         IsReadonly="@Model.IsReadonly"
                         Value="@Model.Inputs.LimitInputs.IterationLimit"
                         InputsChanged="@((int val) => OnInputChange(Model, inputs => inputs.LimitInputs.IterationLimit = val))"/>
    </MudItem>
</MudGrid>

@code {
    protected override IObservable<InputsPanelModelProjection> Select() => Store.Select(RunSelectors.SelectInputsModel);
    
    private async Task OnInputChange(InputsPanelModelProjection inputs, Action<RunInputsState> setter)
    {
        var newInputs = inputs.Inputs with { };
        setter(newInputs);
        Store.Dispatch(new SetRunInputsAction(inputs.RunId, newInputs));
    }
}