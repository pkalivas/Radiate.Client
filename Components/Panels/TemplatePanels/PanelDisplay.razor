@using Radiate.Client.Domain.Templates.Panels
@using System.Text.Json
@using System.Reactive.Linq
@inherits StoreComponent<IPanel>

@if (Model is null)
{
    <div>Loading...</div>
}
else
{
    <DynamicComponent Type="@GetDisplayComponentType()" Parameters="@GetDisplayComponentParameters()"/>
}

@code {
    [CascadingParameter] public Guid RunId { get; set; }
    [Parameter] public Guid PanelId { get; set; }

    protected override IObservable<IPanel> Select() => Store.Select(RunUiSelectors.SelectPanel(PanelId));
    
    private Type GetDisplayComponentType() => Model switch
    {
        GridPanel => typeof(GridPanelDisplay),
        GridPanel.GridItem => typeof(GridItemPanelDisplay),
        ToolbarPanel => typeof(ToolbarPanelDisplay),
        BoundedPaperPanel => typeof(BoundedPaperPanelDisplay),
        TabPanel => typeof(TabPanelDisplay),
        PaperPanel => typeof(PaperPanelDisplay),
        CardPanel => typeof(CardPanelDisplay),
        AccordionPanel => typeof(AccordionPanelDisplay),
        AccordionPanelItem => typeof(ExpansionPanelDisplay),
        _ => throw new Exception($"Panel {Model} not supported")
    };

    private Dictionary<string, object> GetDisplayComponentParameters() => new()
    {
        ["Panel"] = Model switch
        {
            GridPanel gridPanel => gridPanel,
            GridPanel.GridItem gridItem => gridItem,
            ToolbarPanel tabPanel => tabPanel,
            BoundedPaperPanel boundedPaperPanel => boundedPaperPanel,
            TabPanel tabPanel => tabPanel,
            PaperPanel paperPanel => paperPanel,
            CardPanel cardPanel => cardPanel,
            AccordionPanel accordionPanel => accordionPanel,
            AccordionPanelItem accordionPanelItem => accordionPanelItem,
            _ => throw new Exception($"Panel {Model} not supported")
        }
    };

}