@using Radiate.Engines.Entities
@using Radiate.Engines.Schema

@if (EngineState == null)
{
  <div class="container">
      <div class="row">
          <div class="col">
              <div class="d-inline-flex">
                  <MudIcon Icon="@Icons.Material.Filled.Pending" Class="ml-0 mr-2" Color="@Color.Default"/>
                  <strong>Pending</strong>
              </div>
          </div>
      </div>
    </div>
}
else
{
    <div class="d-flex justify-content-between">
        <div class="d-inline-flex ml-1 mr-1" style="width: 75px;">
            <MudIcon Icon="@GetIcon(EngineState)" Class="ml-0 mr-2" Color="@GetColor(EngineState)" Size="Size.Small"/>
            <strong>@(EngineState.Name[..3])</strong>       
        </div>
        <div class="d-inline-flex ml-1 mr-1" style="width: 75px;">
            <strong>Idx:</strong>
            <div class="pl-1">@EngineState.Metrics.Get(MetricNames.Run)?.Statistics?.Sum</div>
        </div>
        <div class="d-inline-flex ml-1 mr-1" style="width: 75px;">
            <MudIcon Icon="@Icons.Material.Filled.Star" Class="" Color="@Color.Default" Size="Size.Small"/>
            <div class="pl-2">@(Math.Round(EngineState.Metrics.Get(MetricNames.Score)?.Statistics?.LastValue ?? 0, 4))</div>
        </div>
        <div class="d-inline-flex ml-1 mr-1" style="width: 75px;">
            <MudIcon Icon="@Icons.Material.Filled.Schedule" Class="" Color="@Color.Default" Size="Size.Small"/>
            <div class="pl-2">@FormatDuration(TimeSpan.FromMilliseconds(EngineState.Metrics.Get(MetricNames.Time)?.Time?.Sum ?? 0))</div>
        </div>
    </div>
}

@code {
    [Parameter] public EngineState? EngineState { get; set; }
    
    private static string GetIcon(EngineState state) => state.State switch
    {
        EngineStateTypes.Pending => Icons.Material.Filled.Pending,
        EngineStateTypes.Started => Icons.Material.Filled.Start,
        EngineStateTypes.Running => Icons.Material.Filled.RunCircle,
        EngineStateTypes.Stopped => Icons.Material.Filled.Stop,
        _ => Icons.Custom.FileFormats.FileCode
    };

    private static Color GetColor(EngineState state) => state.State switch
    {
        EngineStateTypes.Pending => Color.Default,
        EngineStateTypes.Started => Color.Primary,
        EngineStateTypes.Running => Color.Success,
        EngineStateTypes.Stopped => Color.Secondary,
        _ => Color.Default
    };
    
    private string FormatDuration(TimeSpan duration) => duration.ToString("mm\\:ss\\:ffff");

}
