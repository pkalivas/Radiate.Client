@inherits StoreComponent<ImageHeaderProjection>

<div class="d-flex align-items-center justify-content-between">
    <div class="d-flex align-items-center">
        <MudText Typo="Typo.body1" Style="ml-5">@ImageType</MudText>
    </div>
    <div class="d-flex align-items-center mr-1">
        @if (ImageType is ImageTypes.Target && !Model.IsRunning && !Model.IsComplete)
        {
            <div class="d-flex align-items-center justify-content-between mr-3">
                <ImageUpload Height="@Model.Height"
                             Width="@Model.Width"
                             ImageChanged="@((ImageEntity image) => Dispatch(new SetTargetImageAction(Model.RunId, image)))"/>
            </div>
        }
        else if (Model.IsComplete)
        {
            <div class="d-flex align-items-center mr-3">
                <ImageDownload Image="@Model?.Image" IsDisabled="@(!Model.IsComplete)"/>
            </div>
        }
        <RunIcon IsRunning="@Model.IsRunning" IsPaused="@Model.IsPaused" IsComplete="@Model.IsComplete"/>
    </div>
</div>

@code {
    [Parameter] public string ImageType { get; set; }

    protected override IObservable<ImageHeaderProjection> Select() => 
        Store.Select(ImageSelectors.SelectPanelToolbarModel(ImageType));
}