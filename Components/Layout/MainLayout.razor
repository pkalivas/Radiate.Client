@using Radiate.Client.Components.Store.Interfaces
@using Radiate.Client.Components.Store.States.Features
@inherits LayoutComponentBase
@implements IDisposable

<MudThemeProvider IsDarkMode="true"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar>
        <MudButton OnClick="@(() => Dispatcher.Dispatch<LayoutChangedAction, RootFeature>(new LayoutChangedAction { IsSidebarOpen = !_drawerOpen }))"><MudIcon Icon="@Icons.Material.Filled.Menu"></MudIcon></MudButton>
        Radiate Client
    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerOpen">
        <NavMenu/>
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>


@code {
    bool _drawerOpen = true;
    
    [Inject] private IStore Store { get; set; }
    [Inject] private IDispatcher Dispatcher { get; set; }
    
    protected override Task OnInitializedAsync()
    {
        Store.GetState<LayoutState>().SelectedValueChanged += SetDrawerOpen!;
        return base.OnInitializedAsync();
    }

    public void Dispose()
    {
        Store.GetState<LayoutState>().SelectedValueChanged -= SetDrawerOpen!;
    }
    
    private void SetDrawerOpen(object sender, LayoutState state)
    {
        InvokeAsync(() =>
        {
            _drawerOpen = state.IsSidebarOpen;
            StateHasChanged();
        });
    }

}