@using Radiate.Client.Services.Runners
@using Radiate.Engines.Schema
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.PixelFormats
@using Color = MudBlazor.Color
@using Image = SixLabors.ImageSharp.Image
@using Size = MudBlazor.Size
@using Radiate.Client.Components.Store.Models
@inherits StateComponent
@inject IWorkItemQueue WorkItemQueue
@inject EngineRunnerFactory Runner

@if (State.Running)
{
    <MudButton Class="w-100"
               Size="Size.Small"
               Variant="Variant.Filled"
               Color="Color.Secondary"
               OnClick="@Stop">
        Stop
    </MudButton>
}
else
{
    <MudButton Class="w-100"
               Size="Size.Small"
               Variant="Variant.Filled"
               Color="Color.Tertiary"
               OnClick="@Start">
        Start
    </MudButton>
}

<MudButton OnClick="@TestDispatch">BBT: @State.Count</MudButton>

@code {

    private CancellationTokenSource _cancellationToken;

    private void Start()
    {
        _cancellationToken = new CancellationTokenSource();
        
        var runner = Runner($"{State.ModelType}_{State.DataSetType}");
        var inputs = runner.GetInputs(State);

        Dispatch(new FunctionalAction(state => state.Running = true));
        Dispatch(state => state.Scores.Clear());
        WorkItemQueue.Enqueue(runner.Run(inputs, _cancellationToken, OnResultCreated));
        
    }

    private void Stop()
    {
        _cancellationToken.Cancel();
        Dispatch(new FunctionalAction(state => state.Running = false));
    }

    private void TestDispatch()
    {
        Dispatcher.Dispatch(new CountAction());
    }
    
    private void OnResultCreated(EngineOutputState output) => 
        InvokeAsync(() =>
        {
            Dispatch(new FunctionalAction(state => state.EngineOutputs = output));
            Dispatch(state => state.Scores.Add(output.Metrics.Get(MetricNames.Score).Statistics.LastValue));
            
            if (output.Outputs.Any(val => val.Name == "Image"))
            {
                var image = output.GetOutputValue<string>("Image");
                Dispatch(state => state.ImageState.Current = new ImageEntity
                {
                    ImageData = Image.Load<Rgba32>(Convert.FromBase64String(image)),
                });
            }

            if (output.EngineState is EngineStateTypes.Stopped)
            {
                Dispatch(state => state.Running = false);
            }
        });
}