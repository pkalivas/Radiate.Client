@inherits StoreComponent<Radiate.Client.Domain.Store.Models.Projections.ToolBarProjection>
@inject IDialogService DialogService
@inject NavigationManager Navigation

<MudToolBar Dense="true" class="d-flex justify-content-between w-100" Style="background: rgba(39,39,47,1);">
    <div>
        <div class="d-flex align-items-center">
            <div class="mr-2">
                <MudText Typo="Typo.h5">@Model!.ModelType</MudText>
            </div>
            <div class="mr-2">
                <MudText Typo="Typo.h5">@Model!.DataSetType</MudText>
            </div>
            <span class="spacer mr-2">|</span>
            <div class="mr-2">
                <TrainTestToggle/>
            </div>
        </div>
    </div>
    <div>
        <div class="d-flex align-items-center">

            @if (Model.ModelType is (ModelTypes.Graph or ModelTypes.Tree))
            {
                @if (Model.IsComplete)
                {
                    <div class="mr-2">
                        <ModelDownloader/>
                    </div>    
                }
                
                @* <div class="mr-2"> *@
                @*     <TrainTestToggle/> *@
                @* </div> *@
                <span class="spacer mr-2">|</span>
            }
            <ActionsMenu/>
        </div>
    </div>
</MudToolBar>
@if (Model.IsRunning)
{
    <MudProgressLinear Indeterminate="@Model.IsRunning" 
                       Rounded="true" 
                       Color="Color.Success" 
                       Size="Size.Small"/>
}

@code 
{
    [Parameter] public List<string> Actions { get; set; } = new();
    [Parameter] public string Title { get; set; }

    protected override IObservable<ToolBarProjection> Select() => Store.Select(UiSelectors.SelectToolBarModel);
    
    private async Task CopyRun() => await Task.Run(() =>
    {
        var runId = Model!.RunId;
        var newRunId = Guid.NewGuid();

        Navigation.NavigateTo($"/runs/{newRunId}/{Model.ModelType.ToLower()}");

        Store.Dispatch(new SetRunLoadingAction(newRunId, true));
        Store.Dispatch(new NavigateToRunAction(newRunId));
        Store.Dispatch(new CopyRunAction(runId, newRunId));
    });
}
