@inject IDialogService DialogService
@inject NavigationManager NavigationManager
@inherits LayoutComponentBase

<MudThemeProvider IsDarkMode="true"/>
<MudDialogProvider/>
<MudSnackbarProvider/>

<MudLayout>
    <MudAppBar Dense="true" >
        <MudButton OnClick="@(() => Store.Dispatch(new LayoutChangedAction { IsSidebarOpen = !_drawerOpen }))">
            <MudIcon Icon="@Icons.Material.Filled.Menu"/>
        </MudButton>
        Radiate Client
        <div class="ml-4 align-items-center d-flex">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="OpenDialog" Size="Size.Small">
                New Run
                <MudIcon Icon="@Icons.Material.Outlined.Add" Size="Size.Small"/>
            </MudButton>
        </div>
        <MudSpacer/>
        <ActionLoggerPanel/>
    </MudAppBar>
    <MudDrawer Width="300px" @bind-Open="@_drawerOpen" Variant="DrawerVariant.Mini" Elevation="2" OpenMiniOnHover="true">
        <NavMenu IsOpen="@_drawerOpen"/>
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@code 
{
    bool _drawerOpen = true;

    private string ModelType { get; set; } = ModelTypes.Graph;
    private string DataSetType { get; set; } = DataSetTypes.Xor;
    
    [Inject] private IStore<RootState> Store { get; set; }
    
    protected override Task OnInitializedAsync()
    {
        Store.Select(LayoutStateSelector.SelectLayoutState).Subscribe(SetDrawerOpen);
        return base.OnInitializedAsync();
    }
    
    private void SetDrawerOpen(LayoutModel model) => InvokeAsync(() =>
    {
        _drawerOpen = model.IsSidebarOpen;
        StateHasChanged();
    });
    
    private async Task OpenDialog()
    {
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.ExtraSmall,
            FullWidth = true,
            CloseOnEscapeKey = true
        };

        var parameters = new DialogParameters
        {
            ["ModelType"] = ModelType,
            ["DataSetType"] = DataSetType
        };

        var dialogRef = await DialogService.ShowAsync<NewRunInputsDialog>("New Run", parameters, options);
        var result = await dialogRef.Result;

        if (!result.Canceled)
        {
            var run = (RunState) result.Data;
            
            DataSetType = run.Inputs.DataSetType;
            ModelType = run.Inputs.ModelType;
            
            NavigationManager.NavigateTo($"/runs/{run.RunId}/{run.Inputs.ModelType.ToLower()}");

            Store.Dispatch(new NavigateToRunAction(run.RunId));
            Store.Dispatch(new SetRunLoadingAction(run.RunId, true));
            Store.Dispatch(new CreateNewRunAction(run.RunId, run.Inputs.ModelType, run.Inputs.DataSetType));
        }
    }
}