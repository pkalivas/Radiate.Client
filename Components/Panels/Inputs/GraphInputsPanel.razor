@inherits StoreComponent<InputsPanelModelProjection>

<MudGrid Class="mb-3">
    <MudItem md="3">
        <IntInputField Label="Population Size"
                         IsReadonly="@Model.IsReadonly"
                         Value="@Model.Inputs.PopulationInputs.PopulationSize"
                         InputsChanged="@((int val) => OnInputChange(Model, inputs => inputs.PopulationInputs.PopulationSize = val))"/>
    </MudItem>
    <MudItem md="3">
       <FloatInputField Label="Mutation Rate"
                         IsReadonly="@Model.IsReadonly"
                         Value="@Model.Inputs.PopulationInputs.MutationRate"
                         InputsChanged="@((float rate) => OnInputChange(Model, inputs => inputs.PopulationInputs.MutationRate = rate))"/>
    </MudItem>
    <MudItem md="3">
        <FloatInputField Label="Crossover Rate"
                         IsReadonly="@Model.IsReadonly"
                         Value="@Model.Inputs.PopulationInputs.CrossoverRate"
                         InputsChanged="@((float rate) => OnInputChange(Model, inputs => inputs.PopulationInputs.CrossoverRate = rate))"/>
    </MudItem>
    <MudItem md="3">
        <FloatInputField Label="Add Gate Rate"
                         IsReadonly="@Model.IsReadonly"
                         Value="@Model.Inputs.GraphInputs.AddGateRate"
                         InputsChanged="@((float rate) => OnInputChange(Model, inputs => inputs.GraphInputs.AddGateRate = rate))"/>
    </MudItem>
    <MudItem md="3">
        <FloatInputField Label="Add Weight Rate"
                         IsReadonly="@Model.IsReadonly"
                         Value="@Model.Inputs.GraphInputs.AddWeightRate"
                         InputsChanged="@((float rate) => OnInputChange(Model, inputs => inputs.GraphInputs.AddWeightRate = rate))"/>
    </MudItem>
    <MudItem md="3">
        <FloatInputField Label="Add Link Rate"
                         IsReadonly="@Model.IsReadonly"
                         Value="@Model.Inputs.GraphInputs.AddLinkRate"
                         InputsChanged="@((float rate) => OnInputChange(Model, inputs => inputs.GraphInputs.AddLinkRate = rate))"/>
    </MudItem>
    <MudItem md="3">
        <FloatInputField Label="Add Memory Rate"
                         IsReadonly="@Model.IsReadonly"
                         Value="@Model.Inputs.GraphInputs.AddMemoryRate"
                         InputsChanged="@((float rate) => OnInputChange(Model, inputs => inputs.GraphInputs.AddMemoryRate = rate))"/>
    </MudItem>
    <MudItem md="3">
        <IntInputField Label="Node Complexity"
                         IsReadonly="@Model.IsReadonly"
                         Value="@Model.Inputs.GraphInputs.NodeComplexity"
                         InputsChanged="@((int rate) => OnInputChange(Model, inputs => inputs.GraphInputs.NodeComplexity = rate))"/>
    </MudItem>
    <MudItem md="3">
        <IntInputField Label="Iteration Limit"
                         IsReadonly="@Model.IsReadonly"
                         Value="@Model.Inputs.LimitInputs.IterationLimit"
                         InputsChanged="@((int val) => OnInputChange(Model, inputs => inputs.LimitInputs.IterationLimit = val))"/>
    </MudItem>
</MudGrid>

@code {

    protected override IObservable<InputsPanelModelProjection> Select() => Store.Select(RunSelectors.SelectInputsModel);
    
    private async Task OnInputChange(InputsPanelModelProjection inputs, Action<RunInputsState> setter)
    {
        var newInputs = inputs.Inputs with { };
        setter(newInputs);
        Store.Dispatch(new SetRunInputsAction(inputs.RunId, newInputs));
    }

}