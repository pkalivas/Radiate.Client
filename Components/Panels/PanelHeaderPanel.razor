@using Radiate.Engines.Schema
@using Radiate.Engines.Entities
@inherits StoreComponent<PanelToolbarModel>

<div class="d-flex align-items-center justify-content-between">
    <div class="d-flex align-items-center">
        @if (Model.EngineState == EngineStateTypes.Running && !Model.IsPaused)
        {
            <MudProgressCircular
                Size="Size.Small"
                Color="Color.Success"
                Indeterminate="true"
                Style="height:20px;width:20px;"/>
        }
        else if (Model.EngineState == EngineStateTypes.Stopped)
        {
            <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success" Size="Size.Small"/>
        }
        else if (Model.IsPaused)
        {
            <MudIcon Icon="@Icons.Material.Filled.Pause" Color="Color.Warning" Size="Size.Small"/>
        }
        else
        {
            <MudIcon Icon="@Icons.Material.Outlined.Pending" Color="Color.Default" Size="Size.Small"/>
        }

        <MudText Typo="Typo.body1" Style="ml-5">@Title</MudText>
    </div>
    <div class="d-flex align-items-center mr-1">
        <div class="d-inline-flex ml-1 mr-1 align-items-center" style="width: 75px;">
            <MudIcon Icon="@Icons.Material.Filled.Star" Class="" Color="@Color.Default" Size="Size.Small"/>
            <div class="pl-2">@(Math.Round(Model.Score, 4))</div>
        </div>
        <div class="d-inline-flex ml-1 mr-2 align-items-center" >
            <MudIcon Icon="@Icons.Material.Filled.Schedule" Color="@Color.Default" Size="Size.Small"/>
            <div class="pl-2">@(FormatDuration(Model.Duration))</div>
        </div>
        <div class="d-inline-flex ml-1 mr-2 align-items-center">
            <MudIcon Icon="@Icons.Material.Outlined.Numbers" Size="Size.Small"/>
            <div class="pl-2">@Model.Index</div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string Title { get; set; }

    protected override IObservable<PanelToolbarModel> Select() => Store.Select(EngineSelectors.SelectPanelToolbarModel);
    
    private string FormatDuration(TimeSpan duration) => duration.ToString("mm\\:ss\\:ffff");
    
    private static string GetIcon(string state) => state switch
    {
        EngineStateTypes.Pending => Icons.Material.Filled.Pending,
        EngineStateTypes.Started => Icons.Material.Filled.PlayArrow,
        EngineStateTypes.Running => Icons.Material.Filled.PlayArrow,
        EngineStateTypes.Stopped => Icons.Material.Filled.Stop,
        _ => Icons.Custom.FileFormats.FileCode
    };

    private static Color GetColor(string state) => state switch
    {
        EngineStateTypes.Pending => Color.Default,
        EngineStateTypes.Started => Color.Tertiary,
        EngineStateTypes.Running => Color.Tertiary,
        EngineStateTypes.Stopped => Color.Secondary,
        _ => Color.Default
    };

}