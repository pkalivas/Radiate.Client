@using Radiate.Client.Services.Runners
@using Radiate.Engines.Schema
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.PixelFormats
@using Color = MudBlazor.Color
@using Image = SixLabors.ImageSharp.Image
@using Size = MudBlazor.Size
@using Radiate.Client.Components.Store.Models
@using Dispatcher = Akka.Dispatch.Dispatcher
@using Radiate.Client.Components.Store.Interfaces
@using Radiate.Client.Components.Store.States.Features
@inherits StateComponent<EngineControl, AppFeature>
@inject IWorkItemQueue WorkItemQueue
@inject EngineRunnerFactory Runner

@if (State.Running)
{
    <MudButton Class="w-100"
               Size="Size.Small"
               Variant="Variant.Filled"
               Color="Color.Secondary"
               OnClick="@Stop">
        Stop
    </MudButton>
}
else
{
    <MudButton Class="w-100"
               Size="Size.Small"
               Variant="Variant.Filled"
               Color="Color.Tertiary"
               OnClick="@Start">
        Start
    </MudButton>
}

@code {

    private CancellationTokenSource _cancellationToken;


    private void Start()
    {
        Dispatcher.Dispatch<StartEngineAction, AppFeature>(new StartEngineAction());
        // Dispatch(new StartEngineAction());
        // _cancellationToken = new CancellationTokenSource();
        //
        // var runner = Runner($"{State.ModelType}_{State.DataSetType}");
        // var inputs = runner.GetInputs(State);
        //
        // Dispatch(new FunctionalAction(state => state.Running = true));
        // Dispatch(state => state.Scores.Clear());
        // WorkItemQueue.Enqueue(runner.Run(inputs, State.CancellationTokenSource));
    }

    private void Stop()
    {
        // _cancellationToken.Cancel();
        // Dispatch(new FunctionalAction(state => state.Running = false));
    }
    
    // private void OnResultCreated(EngineOutputState output) => 
    //     InvokeAsync(() =>
    //     {
    //         Dispatch(new FunctionalAction(state => state.EngineOutputs = output));
    //         Dispatch(state => state.Scores.Add(output.Metrics.Get(MetricNames.Score).Statistics.LastValue));
    //         
    //         if (output.Outputs.Any(val => val.Name == "Image"))
    //         {
    //             var image = output.GetOutputValue<string>("Image");
    //             Dispatch(state => state.ImageState.Current = new ImageEntity
    //             {
    //                 ImageData = Image.Load<Rgba32>(Convert.FromBase64String(image)),
    //             });
    //         }
    //
    //         if (output.EngineState is EngineStateTypes.Stopped)
    //         {
    //             Dispatch(state => state.Running = false);
    //         }
    //     });
}