@inherits StoreComponent<InputsPanelModelProjection>

<MudGrid Class="px-4 mt-3">
    <MudItem md="3">
        <IntInputField Label="Population Size"
                       IsReadonly="@Model.IsReadonly"
                       Value="@Model.Inputs.PopulationInputs.PopulationSize"
                       InputsChanged="@((int val) => OnInputChange(Model, inputs => inputs.PopulationInputs.PopulationSize = val))"/>
    </MudItem>
    <MudItem md="3">
        <IntInputField Label="Iteration Limit"
                       IsReadonly="@Model.IsReadonly"
                       Value="@Model.Inputs.LimitInputs.IterationLimit"
                       InputsChanged="@((int val) => OnInputChange(Model, inputs => inputs.LimitInputs.IterationLimit = val))"/>
    </MudItem>
    <MudItem md="3">
        <SelectInputField Label="DTLZ Problem"
                          Value="@Model.Inputs.DataSetType"
                          IsReadonly="@Model.IsReadonly"
                          Items="@StateOptions.GetModelDataSets(ModelTypes.MultiObjective)"
                          InputsChanged="@((string val) => OnInputChange(Model, inputs => inputs.DataSetType = val))"/>
    </MudItem>
    <MudItem md="3">
        <IntInputField Label="Front Min"
                       IsReadonly="@Model.IsReadonly"
                       Value="@Model.Inputs.MultiObjectiveInputs.FrontMinSize"
                       InputsChanged="@((int val) => OnInputChange(Model, inputs => inputs.MultiObjectiveInputs.FrontMinSize = val))"/>
    </MudItem>
    <MudItem md="3">
        <IntInputField Label="Front Max"
                       IsReadonly="@Model.IsReadonly"
                       Value="@Model.Inputs.MultiObjectiveInputs.FrontMaxSize"
                       InputsChanged="@((int val) => OnInputChange(Model, inputs => inputs.MultiObjectiveInputs.FrontMaxSize = val))"/>
    </MudItem>
</MudGrid>

@code {
    protected override IObservable<InputsPanelModelProjection> Select() => Store.Select(RunSelectors.SelectInputsModel);
    
    private async Task OnInputChange(InputsPanelModelProjection inputs, Action<RunInputsState> setter)
    {
        var newInputs = inputs.Inputs with { };
        setter(newInputs);
        Store.Dispatch(new SetRunInputsAction(inputs.RunId, newInputs));
    }
}