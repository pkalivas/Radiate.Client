@using Radiate.Client.Domain.Store.Models.States.Outputs

@if (EngineState == null)
{
  <div class="container">
      <div class="row">
          <div class="col">
              <div class="d-inline-flex">
                  <MudIcon Icon="@Icons.Material.Filled.Pending" Class="ml-0 mr-2" Color="@Color.Default"/>
                  <strong>Pending</strong>
              </div>
          </div>
      </div>
    </div>
}
else
{
    <div class="container">
        <div class="row">
            <div class="col">
                <MudIcon Icon="@GetIcon(EngineState)" Color="@GetColor(EngineState)" Size="Size.Small"/>
            </div>
            <div class="col">
                <strong>@(EngineState.Name[..3])</strong>
            </div>
            <div class="col">
                <MudText Typo="Typo.body1">@EngineState.Metrics[MetricNames.Run].Sum</MudText>
            </div>
            <div class="col">
                <MudText Typo="Typo.body1">@EngineState.Metrics[MetricNames.Score].Value</MudText>
            </div>
            <div class="col">
                <MudText Typo="Typo.body2">@FormatDuration(EngineState.Metrics[MetricNames.Time].Total)</MudText>
            </div>
        </div>
        <MudDivider/>
    </div>
}

@code {
    [Parameter] public EngineOutput? EngineState { get; set; }
    
    private static string GetIcon(EngineOutput state) => state.State switch
    {
        EngineStateTypes.Pending => Icons.Material.Filled.Pending,
        EngineStateTypes.Started => Icons.Material.Filled.Start,
        EngineStateTypes.Running => Icons.Material.Filled.RunCircle,
        EngineStateTypes.Stopped => Icons.Material.Filled.Stop,
        _ => Icons.Custom.FileFormats.FileCode
    };

    private static Color GetColor(EngineOutput state) => state.State switch
    {
        EngineStateTypes.Pending => Color.Default,
        EngineStateTypes.Started => Color.Primary,
        EngineStateTypes.Running => Color.Success,
        EngineStateTypes.Stopped => Color.Secondary,
        _ => Color.Default
    };
    
    private static string FormatDuration(TimeSpan duration) => duration.ToString("mm\\:ss\\:ffff");
}
