@inherits StoreComponent<Radiate.Client.Domain.Store.Models.Projections.ToolBarProjection>
@inject IDialogService DialogService
@inject NavigationManager Navigation

<MudToolBar Dense="true" class="flex justify-content-between w-100" Style="background: rgba(39,39,47,1);">
    <div class="container">
        <div class="row w-25 align-items-center">
            <div class="col">
                <h5>@Title&nbsp;@Model!.DataSetType</h5>
            </div>
        </div>
    </div>
    <div>
        <MudMenu Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small" Dense="true">
            @foreach (var action in Actions)
            {
                if (action is MenuActions.Copy)
                {
                    <MudMenuItem Icon="@Icons.Material.Outlined.ContentCopy" IconSize="Size.Small" OnClick="@CopyRun">@action</MudMenuItem>
                }
                else if (action is MenuActions.EngineTree)
                {
                    <MudMenuItem Icon="@Icons.Material.Outlined.AccountTree" IconSize="Size.Small" OnClick="@OpenEngineTree">@action</MudMenuItem>
                }
            }
        </MudMenu>
    </div>
</MudToolBar>
<MudProgressLinear Indeterminate="@Model.IsRunning" Rounded="true" Color="Color.Success"></MudProgressLinear>

@code 
{
    [Parameter] public List<string> Actions { get; set; } = new();
    [Parameter] public string Title { get; set; }

    protected override IObservable<ToolBarProjection> Select() => Store.Select(UiSelectors.SelectToolBarModel);
    
    private async Task OpenEngineTree()
    {
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            CloseOnEscapeKey = true,
        };

        var dialogRef = await DialogService.ShowAsync<EngineTreePanel>("Engine Tree", options);
        await dialogRef.Result;
    }

    private async Task CopyRun() => await Task.Run(() =>
    {
        var runId = Model!.RunId;
        var newRunId = Guid.NewGuid();

        Navigation.NavigateTo($"/runs/{newRunId}/{Model.ModelType.ToLower()}");

        Store.Dispatch(new SetRunLoadingAction(newRunId, true));
        Store.Dispatch(new NavigateToRunAction(newRunId));
        Store.Dispatch(new CopyRunAction(runId, newRunId));
    });
}
