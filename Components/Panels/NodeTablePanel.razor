@inject IDialogService DialogService
@using Radiate.Extensions.Schema
@inherits StoreComponent<OpNodeTablePanelProjection>

@if (Model?.NodeItems != null)
{
    <MudDataGrid Items="@Model.NodeItems" 
                 Dense="true"
                 Elevation="0"
                 FixedHeader="true"
                 Height="400px" ColumnResizeMode="ResizeMode.Column">
        <Columns>
            <HierarchyColumn T="NodeItem" ButtonDisabledFunc="@(_ => !Model.IsComplete)" />
            <PropertyColumn Property="x => x.Index"/>
            <TemplateColumn Title="Node Type">
                <CellTemplate>
                    <NodeChip Node="@context.Item"/>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.Op" Title="Op" />
            <TemplateColumn Title="# Inc./Out.">
                <CellTemplate>
                    <MudText Typo="Typo.h6">
                        @($"{context.Item.Incoming.Count} / {context.Item.Outgoing.Count}")
                    </MudText>
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn Title="Direction">
                <CellTemplate>
                    @if (context.Item.Direction is DirectionTypes.Forward)
                    {
                        <MudIcon Icon="@Icons.Material.Outlined.Forward" Size="Size.Small" Color="Color.Success"/>
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Outlined.Replay" Size="Size.Small" Color="Color.Warning"/>
                    }
                </CellTemplate>
            </TemplateColumn>
            <TemplateColumn>
                <CellTemplate>
                    <MudButton Size="@Size.Small"
                               Variant="@Variant.Outlined"
                               Color="@Color.Primary"
                               Disabled="@(!Model.IsComplete)"
                               OnClick="@(() => OpenNodeDialog(context.Item.Index))">
                        <MudIcon Icon="@Icons.Material.Outlined.MenuOpen" Size="Size.Small"/>
                    </MudButton>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <ChildRowContent>
            <MudCard Elevation="1">
                <MudCardContent>
                    <div class="container">
                        <div class="row">
                            <div class="col-6">
                                <div class="row">
                                    <MudText Typo="Typo.body1">Incoming</MudText>
                                </div>
                                <div class="row">
                                    <MudList row="true" Dense="true">
                                        @foreach (var incoming in context.Item.Incoming)
                                        {
                                            <MudListItem>
                                                <NodeDisplay Node="@(Model.NodeItems[incoming])"/>
                                            </MudListItem>
                                        }
                                    </MudList>
                                </div>
                            </div>
                            <div class="col-6">
                                <div class="row">
                                    <MudText Typo="Typo.body1">Outgoing</MudText>
                                </div>
                                <div class="row">
                                    <MudList row="true" Dense="true">
                                        @foreach (var outgoing in context.Item.Outgoing)
                                        {
                                            <MudListItem>
                                                <NodeDisplay Node="@(Model.NodeItems[outgoing])"/>
                                            </MudListItem>
                                        }
                                    </MudList>
                                </div>
                            </div>
                        </div>
                    </div>
                </MudCardContent>
                <MudCardActions>
                </MudCardActions>
            </MudCard>
        </ChildRowContent>
    </MudDataGrid>
}

@code {
    protected override IObservable<OpNodeTablePanelProjection> Select() =>
        Store.Select(ModelSelectors.SelectOpNodeTablePanelModel);

    private async Task OpenNodeDialog(int index)
    {
        var dialog = await DialogService.ShowAsync<TreeItemDialog<NodeItem, int>>("Node Path", new DialogParameters
        {
            ["Index"] = index,
            ["Items"] = Model!.NodeItems,
            ["ChildContent"] = typeof(NodeDisplay),
            ["ChildContentProps"] = (NodeItem item) => new Dictionary<string, object>
            {
                ["Node"] = item
            }
        },
        new DialogOptions
        {
            CloseButton = true,
            CloseOnEscapeKey = true,
        });
        
        await dialog.Result;
    }
}