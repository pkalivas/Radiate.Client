@inherits StoreComponent<InputsPanelModelProjection>

<MudGrid Class="px-4 mt-3">
    <MudItem md="3">
        <MudNumericField Label="Population Size"
                         Variant="Variant.Filled"
                         Value="@Model.Inputs.PopulationInputs.PopulationSize"
                         ReadOnly="@Model.IsReadonly"
                         DisableUnderLine="@Model.IsReadonly"
                         HideSpinButtons="@Model.IsReadonly"
                         ValueChanged="@((int size) => OnInputChange(Model, inputs => inputs.PopulationInputs.PopulationSize = size))">
        </MudNumericField>
    </MudItem>
    <MudItem md="3">
        <MudNumericField Label="Iteration"
                         Variant="Variant.Filled"
                         ReadOnly="@Model.IsReadonly"
                         DisableUnderLine="@Model.IsReadonly"
                         HideSpinButtons="@Model.IsReadonly"
                         Value="@Model.Inputs.LimitInputs.IterationLimit"
                         ValueChanged="@((int limit) => OnInputChange(Model, inputs => inputs.LimitInputs.IterationLimit = limit))">
        </MudNumericField>
    </MudItem>
    <MudItem md="3">
        <MudSelect SelectedValuesChanged="@OnModelChange"
                   Value="@Model.Inputs.DataSetType"
                   MultiSelection="false"
                   T="string"
                   Label="DTLZ"
                   Variant="Variant.Filled">
            @foreach (var model in StateOptions.GetModelDataSets(ModelTypes.MultiObjective))
            {
                <MudSelectItem Value="@model"/>
            }
        </MudSelect>
    </MudItem>
    <MudItem md="3">
        <MudNumericField Label="Front Min"
                         Variant="Variant.Filled"
                         ReadOnly="@Model.IsReadonly"
                         DisableUnderLine="@Model.IsReadonly"
                         HideSpinButtons="@Model.IsReadonly"
                         Value="@Model.Inputs.MultiObjectiveInputs.FrontMinSize"
                         ValueChanged="@((int size) => OnInputChange(Model, inputs => inputs.MultiObjectiveInputs.FrontMinSize = size))">
        </MudNumericField>
    </MudItem>
    <MudItem md="3">
        <MudNumericField Label="Front Max"
                         Variant="Variant.Filled"
                         ReadOnly="@Model.IsReadonly"
                         DisableUnderLine="@Model.IsReadonly"
                         HideSpinButtons="@Model.IsReadonly"
                         Value="@Model.Inputs.MultiObjectiveInputs.FrontMaxSize"
                         ValueChanged="@((int size) => OnInputChange(Model, inputs => inputs.MultiObjectiveInputs.FrontMaxSize = size))">
        </MudNumericField>
    </MudItem>
</MudGrid>

@code {
    protected override IObservable<InputsPanelModelProjection> Select() => Store.Select(RunSelectors.SelectInputsModel);
    
    private async Task OnInputChange(InputsPanelModelProjection inputs, Action<RunInputsState> setter)
    {
        var newInputs = inputs.Inputs with { };
        setter(newInputs);
        Store.Dispatch(new SetRunInputsAction(inputs.RunId, newInputs));
    }
    
    private void OnModelChange(IEnumerable<string> model)
    {
        var selectedModel = model.First();
        
        var newInputs = Model.Inputs with { DataSetType = selectedModel };
        Store.Dispatch(new SetRunInputsAction(Model.RunId, newInputs));
    }

}