@using Radiate.Client.Services.Store.Schema

<MudDialog>
    <DialogContent>
        <div class="row">
            <div class="col">
                <div>
                    <MudSelect SelectedValuesChanged="@OnModelChange"
                               Value="@RunState.Inputs.ModelType"
                               MultiSelection="false"
                               HelperText="Model To Run"
                               T="string"
                               Label="Model"
                               Variant="Variant.Text">
                        @foreach (var model in StateOptions.ModelNames)
                        {
                            <MudSelectItem Value="@model"/>
                        }
                    </MudSelect>
                </div>
                <div>
                    <MudSelect SelectedValuesChanged="@OnDataSetChange"
                               Value="@RunState.Inputs.DataSetType"
                               MultiSelection="false"
                               HelperText="DataSet To Run"
                               T="string"
                               Label="DataSet"
                               Variant="Variant.Text">
                        @if (RunState.Inputs.ModelType == "Image")
                        {
                            @foreach (var data in StateOptions.ImageDataSetNames)
                            {
                                <MudSelectItem Value="@data"/>
                            }
                        }
                        else
                        {
                            @foreach (var data in StateOptions.DataSetNames)
                            {
                                <MudSelectItem Value="@data"/>
                            }
                        }
                    </MudSelect>
                </div>
                <div class="mt-3">
                    <h5>Genetic Inputs</h5>
                    <MudDivider/>
                    <div class="row">
                        <div class="col">
                            <MudNumericField Label="Population Size"
                                             Variant="Variant.Filled"
                                             Value="@RunState.Inputs.PopulationInputs.PopulationSize"
                                             ValueChanged="@((int size) => RunState.Inputs.PopulationInputs.PopulationSize = size)">
                            </MudNumericField>
                            <MudNumericField Label="Mutation Rate"
                                             Variant="Variant.Filled"
                                             Value="@RunState.Inputs.PopulationInputs.MutationRate"
                                             ValueChanged="@((float rate) => RunState.Inputs.PopulationInputs.MutationRate = rate)">
                            </MudNumericField>
                            <MudNumericField Label="Max Epochs"
                                             Variant="Variant.Filled"
                                             Value="@RunState.Inputs.LimitInputs.IterationLimit"
                                             ValueChanged="@((int limit) => RunState.Inputs.LimitInputs.IterationLimit = limit)">
                            </MudNumericField>
                        </div>
                        @if (RunState.Inputs.ModelType == "Image")
                        {
                            <div class="col">
                                <MudNumericField Label="Num Shapes"
                                                 Variant="Variant.Filled"
                                                 Value="@RunState.Inputs.ImageInputs.NumShapes"
                                                 ValueChanged="@((int limit) => RunState.Inputs.ImageInputs.NumShapes = limit)">
                                </MudNumericField>
                                @if (RunState.Inputs.DataSetType == "Polygon")
                                {
                                    <MudNumericField Label="Num Vertices"
                                                     Variant="Variant.Filled"
                                                     Value="@RunState.Inputs.ImageInputs.NumVertices"
                                                     ValueChanged="@((int limit) => RunState.Inputs.ImageInputs.NumVertices = limit)">
                                    </MudNumericField>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
            @if (RunState.Inputs.ModelType == "Image")
            {
                <div class="col">
                    <div class="mt-3">
                        <h5>Image Inputs</h5>
                        <MudDivider/>
                    </div>
                    <div class="row mb-2 mt-3">
                        <div class="col-9">
                             <ImageDisplay ImageTitle="Upload"
                                            ImageUrl="@RunState.Inputs.ImageInputs.TargetImage.ImageDisplay"/>
                        </div>
                        <div class="col-3">
                            <ImageUpload Height="@RunState.Inputs.ImageInputs.Height"
                                         Width="@RunState.Inputs.ImageInputs.Width"
                                         ImageChanged="@TargetImageChanged"/>
                        </div>
                    </div>
                </div>
            }
        </div>

        <MudDivider/>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Start</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    
    private RunState RunState { get; set; }

    protected override void OnInitialized()
    {
        RunState = new RunState();
        base.OnInitialized();
    }

    void Cancel() => MudDialog.Cancel();

    void Submit() => MudDialog.Close(DialogResult.Ok(RunState)); 

    private void OnModelChange(IEnumerable<string> model)
    {
        var selectedModel = model.First();
        if (RunState.Inputs.ModelType == "Image" && selectedModel != "Image")
        {
	        RunState.Inputs.DataSetType = "Graph";
        }

        RunState.Inputs.ModelType = model.First();
        if (RunState.Inputs.ModelType == "Image")
        {
	        RunState.Inputs.DataSetType = "Polygon";
        }
    }
    
    private void OnDataSetChange(IEnumerable<string> value)
    {
        RunState.Inputs.DataSetType = value.First();
    }

    private void TargetImageChanged(ImageEntity image)
    {
        RunState.Inputs.ImageInputs.TargetImage = image;
    }
}