<ScorePanel/>

@* <div class="container"> *@
@*     <div class="row"> *@
@*         <div class="col"> *@
@*             <EngineStateTree/> *@
@*         </div> *@
@*         <div class="col"> *@
@*             <ScorePanel/> *@
@*         </div> *@
@*     </div> *@
@* </div> *@

@* <MudToggleGroup T="string" SelectionMode="SelectionMode.SingleSelection" @bind-Value="paramType" Color="Color.Primary" CheckMark FixedContent> *@
@*     <MudToggleItem Value="@("total")" Text="Total" /> *@
@*     <MudToggleItem Value="@("avg")" Text="Average" /> *@
@* </MudToggleGroup> *@
@* *@
@* <MudTable Items="@GetMetricsToDisplay()" ItemSize="25" Elevation="0" Dense="true"> *@
@*     <HeaderContent> *@
@*         <MudTh>Metric</MudTh> *@
@*         @if (paramType == "total") *@
@*         { *@
@*             <MudTh>Total</MudTh> *@
@*             <MudTh>Total Time</MudTh> *@
@*         } *@
@*         else *@
@*         { *@
@*             <MudTh>Avg.</MudTh> *@
@*             <MudTh>Avg. Time</MudTh> *@
@*         } *@
@*     </HeaderContent> *@
@*     <RowTemplate> *@
@*         <MudTd DataLabel="Metric">@context.Name</MudTd> *@
@*          *@
@*         @if (paramType == "total") *@
@*         { *@
@*             <MudTd DataLabel="Total">@context.Statistics.Sum</MudTd> *@
@*             <MudTd DataLabel="Total Time">@(TimeSpan.FromMilliseconds(context.Time.Sum).ToString())</MudTd> *@
@*         } *@
@*         else *@
@*         { *@
@*             <MudTd DataLabel="Avg.">@Math.Round(context.Statistics.Mean, 5)</MudTd> *@
@*             <MudTd DataLabel="Avg. Time">@(TimeSpan.FromMilliseconds(context.Time.Mean))</MudTd> *@
@*         } *@
@*          *@
@*     </RowTemplate> *@
@* </MudTable> *@

@code {

    // protected override IObservable<RunModel> Select() => Store.Select(RunSelectors.SelectRun);
    //
    // private string paramType = "total";
    //
    // private List<MetricValue> GetMetricsToDisplay() => DisplayNames()
    //         .Select(name => Model?.Outputs.Metrics.Get(name))
    //         .Where(val => val != null)
    //         .SelectMany(Flatten)
    //         .ToList();
    //
    // private List<string> DisplayNames() => new()
    // {
    //     MetricNames.Evaluate,
    //     MetricNames.Survivors,
    //     MetricNames.Offspring,
    //     MetricNames.Alter,
    //     MetricNames.Stale,
    //     MetricNames.Invalid,
    // };
    //
    // private List<MetricValue> Flatten(MetricValue value)
    // {
    //     if (value.Children.Count == 0)
    //     {
    //         return new List<MetricValue> { value };
    //     }
    //     
    //     var list = new List<MetricValue>();
    //     foreach (var child in value.Children)
    //     {
    //         list.AddRange(Flatten(child.Value));
    //     }
    //     
    //     return list;
    // }
}