@using Radiate.Client.Components.Store.Models
@inherits StateComponent<ImageInputs, AppFeature>

<div class="row px-3">
    <div class="col">
        
        @* @if (State.DataSetType == "Polygon") *@
        @* { *@
        @*     <MudNumericField Label="Polygon Count" *@
        @*                      Variant="Variant.Filled" *@
        @*                      Value="@State.EngineInputs.NumShapes" *@
        @*                      ValueChanged="@((int num) => Dispatch(state => state.EngineInputs.NumShapes = num))"> *@
        @*     </MudNumericField> *@
        @*     <MudNumericField Class="mt-2" Label="Polygon Edges" *@
        @*                      Variant="Variant.Filled" *@
        @*                      Value="@State.EngineInputs.NumVertices" *@
        @*                      ValueChanged="@((int edges) => Dispatch(state => state.EngineInputs.NumVertices = edges))"> *@
        @*     </MudNumericField> *@
        @* } *@
        @* else if (State.DataSetType == "Circle") *@
        @* { *@
        @*     <MudNumericField Label="Circle Count" *@
        @*                      Variant="Variant.Filled" *@
        @*                      Value="@State.EngineInputs.NumShapes" *@
        @*                      ValueChanged="@((int num) => Dispatch(state => state.EngineInputs.NumShapes = num))"> *@
        @*     </MudNumericField> *@
        @* } *@

        <div class="mt-3">
            <ImageUpload Height="@State.ImageState.ImageHeight"
                         Width="@State.ImageState.ImageWidth"
                         ImageChanged="@OnTargetImageChanged"/>
        </div>
    </div>
    <div class="col">
        <ImageDisplay ImageTitle="Target" ImageUrl="@State.ImageState.Target.ImageDisplay"/>
    </div>
    <div class="col">
        <ImageDisplay ImageTitle="Current" ImageUrl="@State.ImageState.Current.ImageDisplay"/>
    </div>
</div>

@code {
        
    private void OnTargetImageChanged(ImageEntity image)
    {
        // Dispatch(state => state.ImageState.Target = image);
    }
}