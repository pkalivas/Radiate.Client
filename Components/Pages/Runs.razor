@page "/runs/{runId:guid}/{modelType}"
@rendermode InteractiveServer
@inherits StoreComponent<StandardRunUiProjection>

@if (Model is not null && !Model.IsLoading)
{
    <MudContainer Class="mt-4 px-8" MaxWidth="MaxWidth.False">
        <MudGrid>
            @foreach (var panel in Model!.UiTemplate!.GridList.GridPanels)
            {
                <MudItem md="@panel.Cols" @key="@panel.Id">
                    @if (panel.GridPanel is ToolbarPanel)
                    {
                        <ToolBar Title="@panel.GridPanel.Title" Actions="@panel.GridPanel.Actions">
                            <ChildContent>
                                <MudPaper Elevation="2" MaxHeight="@($"{panel.MaxHeight}px")" Class="pa-4">
                                    <PanelDisplay Panel="@panel.GridPanel"/>
                                </MudPaper>
                            </ChildContent>
                        </ToolBar>
                    }
                    else
                    {
                        <MudPaper Elevation="2" MaxHeight="@($"{panel.MaxHeight}px")" Class="pa-4">
                            <PanelDisplay Panel="@panel.GridPanel"/>
                        </MudPaper>
                    }
                </MudItem>
            }
        </MudGrid>
        <MudGrid>
            <MudItem md="8">
                <MudExpansionPanels Dense="true" Elevation="2" MultiExpansion="true">
                    @foreach (var panel in Model!.UiTemplate!.LeftSideAccordion.ExpansionPanels)
                    {
                        <MudExpansionPanel IsExpanded="@GetIsExpanded(panel.Id)"
                                           Dense="true"
                                           MaxHeight="@panel.MaxHeight"
                                           IsExpandedChanged="@((bool changed) => OnExpandedChanged(changed, panel.Id))"
                                           @key="@panel.Id">
                            <TitleContent>
                                <PanelHeaderPanel Title="@panel.ExpansionPanel.Title"/>
                            </TitleContent>
                            <ChildContent>
                                <PanelDisplay Panel="@panel.ExpansionPanel"/>
                            </ChildContent>
                        </MudExpansionPanel>
                    }
                </MudExpansionPanels>
            </MudItem>
            <MudItem md="4">
                <MudExpansionPanels Dense="true" Elevation="2" MultiExpansion="true">
                    @foreach (var panel in Model!.UiTemplate!.RightSideAccordion.ExpansionPanels)
                    {
                        <MudExpansionPanel IsExpanded="@GetIsExpanded(panel.Id)"
                                           Dense="true"
                                           MaxHeight="@panel.MaxHeight"
                                           IsExpandedChanged="@((bool changed) => OnExpandedChanged(changed, panel.Id))"
                                           @key="@panel.Id">
                            <TitleContent>
                                <PanelHeaderPanel Title="@panel.ExpansionPanel.Title"/>
                            </TitleContent>
                            <ChildContent>
                                <PanelDisplay Panel="@panel.ExpansionPanel"/>
                            </ChildContent>
                        </MudExpansionPanel>
                    }
                </MudExpansionPanels>
            </MudItem>
        </MudGrid>
    </MudContainer>   
}
else
{
    <MudProgressCircular Size="Size.Large" Color="Color.Primary" Class="mt-4"/>
}

@code {
    [Parameter] public Guid RunId { get; set; }
    [Parameter] public string ModelType { get; set; }

    protected override IObservable<StandardRunUiProjection> Select() => Store.Select(UiSelectors.SelectStandardRunUiModel);
    
    private async Task OnExpandedChanged(bool changed, Guid panelId) =>
        await InvokeAsync(() => Dispatch(new SetPanelsExpandedAction(Model.RunId, new Dictionary<Guid, bool>
        {
            [panelId] = changed
        })));
    
    private bool GetIsExpanded(Guid panelId) => Model.IsLoading 
        ? false 
        : Model.IsExpanded.TryGetValue(panelId, out var ex) ? ex : false;
}
